/**
 * GitHub Maven repo config
 * You will need to generate a personal access token and configure your 'local.properties' file like this:
 * githubName=username
 * githubToken=XXX
 *
 */

def getLocalOrEnvVar(String localKey, String envVar) {
    Properties properties = new Properties()

    if (rootProject.file('local.properties').isFile()) {
        properties.load(rootProject.file("local.properties").newDataInputStream())
    }

    if (!properties.getProperty(localKey) && !System.getenv(envVar)) {
        println "Please configure '$localKey' in local.properties or '$envVar' environment varible."
    }

    return properties.getProperty(localKey) ?: System.getenv(envVar) ?: ""
}

ext.signingKeyId = getLocalOrEnvVar("signing.keyId", "SIGNING_KEY_ID")
ext.signingKey = getLocalOrEnvVar("signing.key", "SIGNING_KEY")
ext.signingKeyPassword = getLocalOrEnvVar("signing.password", "SIGNING_PASSWORD")

ext.mavenGitHubMaterialLists = {
    maven {
        name = "GitHubPackages"
        url = uri("https://maven.pkg.github.com/nicbell/material-lists")
        credentials {
            username = getLocalOrEnvVar('githubName', 'GITHUB_ACTOR')
            password = getLocalOrEnvVar('githubToken', 'GITHUB_TOKEN')
        }
    }
}
ext.mavenSonaTypeSnapshots = {
    maven {
        name "snapshot"
        url = "https://s01.oss.sonatype.org/content/repositories/snapshots"
        credentials {
            username = getLocalOrEnvVar('sonatypeUsername', 'SONATYPE_USERNAME')
            password = getLocalOrEnvVar('sonatypePassword', 'SONATYPE_PASSWORD')
        }
    }
}
ext.mavenSonaTypeStaging = {
    maven {
        name "staging"
        url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2"
        credentials {
            username = getLocalOrEnvVar('sonatypeUsername', 'SONATYPE_USERNAME')
            password = getLocalOrEnvVar('sonatypePassword', 'SONATYPE_PASSWORD')
        }
    }
}